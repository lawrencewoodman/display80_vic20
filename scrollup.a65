;======================================================================
; Scroll messages up the screen
;----------------------------------------------------------------------
; Requires 8k+ memory
;----------------------------------------------------------------------
; Copyright (C) 2021-2022 Lawrence Woodman <lwoodman@vlifesystems.com>
; Licensed under an MIT licence.  Please see LICENCE.md for details.
;======================================================================

; Locations in zero page
FDX         = $CB             ; Matrix key coordinate of key press

; KERNAL routines
CHKIN       = $FFC6           ; Open a channel for input
GETIN       = $FFE4           ; Get a character from the keyboard buffer

; Key constants
F1          = 133
F2          = 137
F3          = 134
F5          = 135
F7          = 136
KEYP        = 80              ; The P key



            .word start       ; Load address ($2000 / 8192)
            * = $2000
start       jmp  main

#include "display.a65"

main        .(
            jsr  D80_init
            jsr  D80_start80
            lda  #00
            sta  pause

forever     lda  #<msg
            sta  STRADDR
            lda  #>msg
            sta  STRADDR+1
            jsr  scrollText
            jmp  forever
.)


delay       .(
getKey      lda  FDX
            cmp  #64          ; No key pressed
            bne  getKey       ; Wait if key pressed

            jsr  GETIN
            cmp  #F1
            beq  cols20_q1
            cmp  #F3
            beq  cols20_q2
            cmp  #F5
            beq  cols20_q3
            cmp  #F7
            beq  cols20_q4
            cmp  #F2
            beq  cols80
            cmp  #KEYP
            beq  keyP
            bne  wait

cols20_q1   jsr  D80_start20
            lda  #1
            jsr  D80_setView20
            jsr  D80_redraw
            jmp  wait
cols20_q2   jsr  D80_start20
            lda  #2
            jsr  D80_setView20
            jsr  D80_redraw
            jmp  wait
cols20_q3   jsr  D80_start20
            lda  #3
            jsr  D80_setView20
            jsr  D80_redraw
            jmp  wait
cols20_q4   jsr  D80_start20
            lda  #4
            jsr  D80_setView20
            jsr  D80_redraw
            jmp  wait
cols80      jsr  D80_start80
            jsr  D80_redraw
            jmp  wait

keyP        lda  pause
            beq  setPause
            lda  #0
            sta  pause
            jmp  wait
setPause    lda  #1
            sta  pause

            ; Wait for a little bit
wait        ldx  #$10
loop1       ldy  #$FF
loop2       dey
            bne  loop2
            dex
            bne  loop1
            rts
.)


scrollText  .(
loop        ldy  #00
            lda  (STRADDR), y
            beq  done
            jsr  D80_putch
            jsr  D80_getx
            bne  notFirstCol  ; If in first column
pauseLoop   jsr  delay
            lda  pause
            bne  pauseLoop

notFirstCol inc  STRADDR      ; Increment STRADDR
            bne  incDone      ; |
            inc  STRADDR+1    ; /
incDone
            jmp  loop
done        rts
.)


pause       .byt 0


msg         .aasc "80 columns on the Commodore VIC-20!",NL
            .aasc NL
            .aasc "Supports Newline (software definable), Backspace, "
            .aasc "Tabs to next eighth column and "
            .aasc "ASCII 32-126 with case folded into a single case.  "
            .aasc "The fonts are 2*8 and uses height and descenders "
            .aasc "to help differentiate the characters.  "
            .aasc "The numbers are taller for the same reason.",NL
            .aasc NL
            .aasc "The standard text mode is 80*22 with the ability to "
            .aasc "switch to 20 column mode which views the 80 column "
            .aasc "screen through a movable window using the "
            .aasc "standard 8*8 font.",NL
            .aasc NL
            .aasc "The alphabet:",NL
            .aasc "  a b c d e f g h i j k l m n o p q r s t u v w x y z",NL
            .aasc "  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z",NL
            .aasc "The numbers:",NL
            .aasc "  0 1 2 3 4 5 6 7 8 9",NL
            .aasc "The rest:",NL
            .aasc "  ! ", 34, " # $ % & ' ( ) * + , - . / : ; < = > ? @ "
            .aasc "[ \ ] ^ _ ` { ", 124, " } ~",NL
            .aasc  NL
            .aasc "Where there's a will there's a way!",NL
            .aasc  NL,0

D80_shadScr ; The shadow screen with room for 80x22 bytes
