;======================================================================
; Print text using a 2x8 font on either an 80 column screen
; or moving window 20 column screen
;----------------------------------------------------------------------
; Requires 8k+ memory
; Note the zero page locations used and need
; to provide a label D80_shadScr that will have room for
; the shadow screen after it (80x22 bytes).
;----------------------------------------------------------------------
; Copyright (C) 2021-2022 Lawrence Woodman <lwoodman@vlifesystems.com>
; Licensed under an MIT licence.  Please see LICENCE.md for details.
;======================================================================

; Configuration
SNUMCOL     = 80              ; Number of simulated text columns
                              ; Must be divisible by 4
SNUMROW     = 22              ; Number of simulated text rows
                              ; Must be divisible by 2
RVTVORIGIN  = 40              ; Vertical TV picture origin
NL          = $0A             ; Newline character

; ASCII characters
SPACE       = 32              ; Space character
BS          = 8               ; Backspace character
TAB         = 9               ; Tab character

; Colour constants
CLBLACK     = 00
CLBLUE      = 06

; Mode constants
MODE80      = 1               ; 80 column mode
MODE20      = 0               ; 20 column mode

; VIC Registers
VICCR1      = $9001           ; Vertical TV picture origin
VICCR2      = $9002           ; Number of columns, part of screen address
VICCR3      = $9003           ; Number of rows, raster location, char size
VICCR5      = $9005           ; Screen map and character map address

; Display memory location constants
CHRMAPBASE  = $1000           ; Base address of character map
SCRBASE     = $1E00           ; Base address of screen
COLMAPBASE  = $9600           ; Base address of colour map

; Zero Page Variable Locations
CHRADDR     = $01             ; 16-bit character map address (calculations)
SCRADDR     = $03             ; 16-bit screen address (calculations)
CHDEFADDR   = $05             ; 16-bit character def address (calculations)
SHADADDR    = $07             ; 16-bit shadow screen address (calculations)
STRADDR     = $0B             ; 16-bit address of a string to print
SFROM       = $0D             ; 16-bit scroll from address
STO         = $0F             ; 16-bit scroll to address
CHDEFROW    = $12             ; 8-bit character defintion row



            ;--------------------------------
            ; D80_init
            ; Init 80/20 character screen
            ;--------------------------------
D80_init    lda  #00              ; Init cursor to top left of screen
            sta  D80_Crx          ; |
            sta  D80_Cry          ; /
            sta  D80_InRedraw     ; Set as not in middle of redraw
            jmp  D80_ClrScrShad   ; Clear the shadow screen (RTS)


            ;------------------------------------------
            ; D80_scrollup
            ; Scroll the screen up
            ; NOTE two lines to match D80_Scrollup80
            ;------------------------------------------
D80_scrollup  .(
            jsr  D80_ScrollupShad
            lda  D80_Mode
            cmp  #MODE80
            beq  is80
is20        jmp  D80_Scrollup20
is80        jmp  D80_Scrollup80
.)


            ;------------------------------------------
            ; D80_putch
            ; Print a character to screen at cursor
            ; and move cursor
            ; This will print NL, BS control characters
            ; and ASCII 32-126
            ;------------------------------------------
            ; ACC - character to print
            ;------------------------------------------
D80_putch   .(
            cmp  #NL          ; If newline character
            beq  newline
            cmp  #BS          ; If backspace character
            beq  backspace
            cmp  #TAB         ; If tab character
            beq  tab

            cmp  #SPACE       ; If acc<32 or acc>=127 then ignore
            bcc  done         ; |
            cmp  #127         ; |
            bcs  done         ; /

            ; Print the character
            pha
            lda  D80_Crx
            tax
            lda  D80_Cry
            tay
            pla
            jsr  D80_putchxy

            ; Move cursor
            lda  D80_Crx
            cmp  #SLSTCOL80
            bne  nextCol

            ; Move cursor to next line
newline     lda  #0
            sta  D80_Crx
            lda  D80_Cry
            cmp  #(SNUMROW-1)
            beq  scroll       ; Scroll up if on last line
            inc  D80_Cry
            bne  done         ; Equivalant to JMP

tab         ; Move to next tab stop (every eighth column)
            lda  D80_Crx
            cmp  #72          ; If D80_Crx>=72, newline
            bcs  newline      ; /
            and  #7           ; Look at right 3 bits
            eor  #$FF         ; Subtract value from 7
            and  #7           ; /
            tax
            inx
spaceLoop   txa
            pha
            lda  #SPACE       ; Print a space
            jsr  D80_putch    ; /
            pla
            tax
            dex
            bne  spaceLoop
            beq  done

backspace   ; Move cursor back one character and delete character
            ldx  D80_Crx      ; If at beginning of line
            beq  crup         ; /
            dec  D80_Crx
            jmp  blank
crup        lda  D80_Cry      ; If at top left of screen ignore key
            beq  done         ; /
            lda  #79          ; Move to end of previous line
            sta  D80_Crx
            dec  D80_Cry
blank       lda  #SPACE       ; Blank out the character
            ldx  D80_Crx      ; |
            ldy  D80_Cry      ; |
            jsr  D80_putchxy  ; |
            jmp  done         ; /

scroll      jsr  D80_scrollup
            jmp  done

nextCol     inc  D80_Crx
done        rts
.)


            ;-----------------------------------------
            ; D80_putchxy
            ; Print a character to screen at position
            ; specified on either the 80 columns or
            ; 20 column screen
            ;-----------------------------------------
            ; ACC - character to print
            ;   X - Column on simulated screen
            ;   Y - Row on simulated screen
            ;-----------------------------------------
D80_putchxy .(
            sta D80_TmpAcc
            txa               ; Push the X,Y parameters to the stack
            pha               ; |
            tya               ; |
            pha               ; /
            lda  D80_TmpAcc
            jsr  D80_PutchxyShd   ; Store the character to the shadow screen
            pla
            tay
            pla
            tax
            lda  D80_Mode
            cmp  #MODE80
            beq  is80
is20        lda  D80_TmpAcc
            jmp  D80_Putchxy20     ; Will return from here
is80        lda  D80_TmpAcc
            jmp  D80_Putchxy80     ; Will return from here
.)


            ;----------------------------------------
            ; D80_puts
            ; Print string
            ;----------------------------------------
            ; STRADDR - Location of zero terminated
            ;           string.  This location is
            ;           left at end of string after
            ;           function returns.
            ;----------------------------------------
D80_puts    .(
loop        ldy  #00
            lda  (STRADDR), y
            beq  done
            jsr  D80_putch
            inc  STRADDR      ; Increment STRADDR
            bne  incDone      ; |
            inc  STRADDR+1    ; /
incDone
            jmp  loop
done        rts
.)


            ;----------------------------------------
            ; D80_getx
            ; Returns X (column) value of cursor
            ; in ACC
            ;----------------------------------------
D80_getx    lda  D80_Crx
            rts


            ;----------------------------------------
            ; D80_setxy
            ; Set X and Y location of cursor
            ;----------------------------------------
            ; X - Column
            ; Y - Row
            ;----------------------------------------
D80_setxy   stx  D80_Crx
            sty  D80_Cry
            rts

#include "display80.a65"
#include "display20.a65"
#include "displayshadow.a65"
#include "fontdef.a65"        ; The font definitions


;====================================
; Data
;====================================
D80_Mode        .byt MODE20   ; Whether in 80 or 20 colummn mode
D80_Crx         .byt 0        ; Cursor x position on simulated screen
D80_Cry         .byt 0        ; Cursor y position on simulated screen
D80_InRedraw    .byt 0        ; In middle of redraw operation
D80_TmpAcc      .byt 0        ; Temporary location to store ACC if stack
                              ; not convenient
