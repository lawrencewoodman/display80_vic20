;======================================================================
; Handle the shadow screen which contains the original
; ASCII text in full
;----------------------------------------------------------------------
; Included by display.a65, see that file for more details
;----------------------------------------------------------------------
; Copyright (C) 2021-2022 Lawrence Woodman <lwoodman@vlifesystems.com>
; Licensed under an MIT licence.  Please see LICENCE.md for details.
;======================================================================

; Dimensions for shadow screen
RNUMCOLSHD  = 80
RNUMROWSHD  = 22

            ;-------------------------------------
            ; D80_ClrScrShad
            ; Clear the shadow screen
            ;-------------------------------------
D80_ClrScrShad  .(
            lda  #<D80_shadScr
            sta  SHADADDR
            lda  #>D80_shadScr
            sta  SHADADDR+1
            ldy  #00
loop        lda  #SPACE
            sta  (SHADADDR),y
            inc  SHADADDR               ; Increment SHADADDR
            bne  doneInc                ; |
            inc  SHADADDR+1             ; /
doneInc     lda  SHADADDR+1             ; Test if at end of shadow screen
            cmp  #>D80_shadScr+(80*22)  ; |
            bne  loop                   ; |
            lda  SHADADDR               ; |
            cmp  #<D80_shadScr+(80*22)  ; |
            bne  loop                   ; /
            rts
.)


            ;------------------------------------------
            ; D80_redraw
            ; Redraw the screen from the shadow screen
            ;------------------------------------------
            ; TODO check if need redraw might be able to just repoint
            ; screen and character set in some situations
D80_redraw  .(
            lda  #1               ; Set as in middle of redraw
            sta  D80_InRedraw     ; /
            lda  D80_Crx          ; Push crx and cry to stack
            pha                   ; |
            lda  D80_Cry          ; |
            pha                   ; /
            lda  #(RNUMCOLSHD-1)
            sta  D80_Crx
            lda  #00
            sta  D80_Cry
            lda  #<D80_shadScr
            sta  SHADADDR
            lda  #>D80_shadScr
            sta  SHADADDR+1

loop        ldy  D80_Crx         ; Copy a line of text to the screen
            lda  (SHADADDR),y    ; |  y here contains column (crx)
            ldx  D80_Crx         ; |
            ldy  D80_Cry         ; |
            jsr  D80_putchxy     ; |
            dec  D80_Crx         ; |
            bpl  loop            ; /

            lda  #(RNUMCOLSHD-1) ; Move crx back to end of line
            sta  D80_Crx         ; /

            clc                  ; Increment SHADADDR by RNUMCOLSHD
            lda  SHADADDR        ; |  lsb
            adc  #RNUMCOLSHD     ; |
            sta  SHADADDR        ; |
            bcc  nextLine        ; |
            inc  SHADADDR+1      ; /  msb

nextLine    inc  D80_Cry
            lda  D80_Cry
            cmp  #RNUMROWSHD
            bne  loop

            pla
            sta  D80_Cry
            pla
            sta  D80_Crx

            lda  #0               ; Set as not in middle of redraw
            sta  D80_InRedraw     ; /
            rts
.)


            ;-----------------------------------------
            ; D80_PutchxyShd
            ; Store a character in the shadow screen
            ;-----------------------------------------
            ; ACC - character to print (ASCII)
            ;   X - Column on simulated screen
            ;   Y - Row on simulated screen
            ;-----------------------------------------
D80_PutchxyShd  .(
            ; Add column to D80_shadScr (shadow screen)
            pha                   ; Push character to stack
            lda  D80_InRedraw     ; If in redraw then return
            beq  findCol          ; |
            pla                   ; |
            rts                   ; /

findCol     clc
            txa
            adc  #<D80_shadScr  ; lsb
            sta  SHADADDR       ; lsb
            lda  #00
            adc  #>D80_shadScr  ; msb
            sta  SHADADDR+1     ; msb

            ; Find location of row
findRow     cpy  #00
            beq  storeCh

            clc               ; Add number of columns to address
            lda  SHADADDR     ; |  lsb
            adc  #RNUMCOLSHD  ; |
            sta  SHADADDR     ; |  lsb
            bcc  noCarry      ; |
            inc  SHADADDR+1   ; /  msb
noCarry     dey
            jmp  findRow

storeCh     pla
            ldy  #00
            sta  (SHADADDR), y
done        rts
.)


            ;-----------------------------------------
            ; D80_ScrollupShad
            ; Scroll shadow screen up two lines
            ; NOTE two lines to match D80_Scrollup80
            ;-----------------------------------------
D80_ScrollupShad .(
            lda  #<(D80_shadScr+(2*RNUMCOLSHD))   ; Set copy start locations
            sta  SFROM                            ; |
            lda  #>(D80_shadScr+(2*RNUMCOLSHD))   ; |
            sta  SFROM+1                          ; |
            lda  #<D80_shadScr                    ; |
            sta  STO                              ; |
            lda  #>D80_shadScr                    ; |
            sta  STO+1                            ; /

            ldy  #0
            ldx  #>(RNUMCOLSHD*(RNUMROWSHD-2))  ; Number of pages to move
            beq  partPage
pageLoop    lda  (SFROM),y                    ; Copy a page
            sta  (STO),y                      ; |
            iny                               ; |
            bne  pageLoop                     ; /
            inc  SFROM+1                      ; Next page
            inc  STO+1                        ; /
            dex
            bne  pageLoop
            ; y would always be 0 at this point
partPage    ldx  #<(RNUMCOLSHD*(RNUMROWSHD-2))   ; Remainder of last page
            beq  wipe
partLoop    lda  (SFROM),y                   ; Copy remainder
            sta  (STO),y                     ; |
            iny                              ; |
            dex                              ; |
            bne  partLoop                    ; /

            ; Wipe last line
wipe        lda  #<(D80_shadScr+(RNUMCOLSHD*(RNUMROWSHD-2)))  ; lsb
            sta  STO
            lda  #>(D80_shadScr+(RNUMCOLSHD*(RNUMROWSHD-2)))  ; msb
            sta  STO+1
            ldy  #(2*RNUMCOLSHD)   ; Wipe two lines of characters
            lda  #SPACE            ; Use a space to wipe the lines
wipeLoop    sta  (STO),y
            dey
            cpy  #$FF
            bne  wipeLoop

            rts
.)
