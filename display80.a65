;======================================================================
; Print text using a 2x8 font on an 80 column screen
;----------------------------------------------------------------------
; Requires 8k+ memory
; Note the zero page locations used and need
; to provide a label shadScr8020 that will have room for
; the shadow screen after it (80x22 bytes).
;----------------------------------------------------------------------
; Copyright (C) 2021-2022 Lawrence Woodman <lwoodman@vlifesystems.com>
; Licensed under an MIT licence.  Please see LICENCE.md for details.
;======================================================================


; Calculated dimensions for 80 column screen
RNUMCOL80   = SNUMCOL/4       ; Real number of text columns
RNUMROW80   = SNUMROW/2       ; Real number of text rows
SLSTCOL80   = SNUMCOL-1       ; Last simulated column


            ;--------------------------------
            ; start80
            ; Start 80 character screen
            ;--------------------------------
start80     lda  #MODE80      ; Set which mode we are in
            sta  mode8020     ; /
            jsr  cfgScr80     ; Configure screen
            jsr  initClr80    ; Init the colour map
            jsr  initScr80    ; Init the screen
            jmp  clrScr80     ; Clear the screen by clearing character map


            ;-----------------------------------------------
            ; cfgScr80
            ; Configure screen dimensions, position and
            ; memory locations
            ;-----------------------------------------------
cfgScr80    lda  #RVTVORIGIN
            sta  VICCR1       ; Set vertical TV origin
            lda  #(128|RNUMCOL80)
            sta  VICCR2       ; Set number of columns displayed
                              ; and screen address
            lda  #((RNUMROW80*2)+1)
            sta  VICCR3       ; Set number of rows displayed
                              ; and character size
            lda  #(240|12)    ; Set screen and character map addresses
                              ; to $1E00 and $1000
            sta  VICCR5
            rts


            ;-----------------------------------------------
            ; initClr80
            ; Init the colour map to alternate black/blue
            ; colours to help make characters more distinct
            ;-----------------------------------------------
initClr80   .(
            ldy  #00
            lda  #CLBLACK
loop        sta  COLMAPBASE, y
            cmp  #CLBLACK
            beq  toBlue
            lda  #CLBLACK
            jmp  next
toBlue      lda  #CLBLUE
next        iny
            bne  loop
            rts
.)


            ;-----------------------------------------------
            ; initScr80
            ; Fill screen map with characters needed
            ;-----------------------------------------------
            ; TODO improve this loop code
initScr80   .(
            ldy  #(RNUMCOL80*RNUMROW80)
loop        tya
            sta  SCRBASE, y     ; Store character in screen map
            dey
            cpy  #$FF
            bne  loop
            rts
.)


            ;-----------------------------------------------
            ; clrScr80
            ; Clear the screen by zeroing the character map
            ;-----------------------------------------------
clrScr80    .(
            lda  #$00
            sta  CHRADDR
            lda  #>CHRMAPBASE
            sta  CHRADDR+1
            ldy  #00
loop        lda  #00
            sta  (CHRADDR),y      ; Set character map location
            inc  CHRADDR          ; Increment CHRADDR
            bne  doneInc          ; |
            inc  CHRADDR+1        ; /
doneInc     lda  CHRADDR+1
            cmp  #>SCRBASE
            bne  loop
            rts
.)


            ;------------------------------------------
            ; scrollup80
            ; Scroll 80 column screen up up two lines
            ;------------------------------------------
scrollup80  .(
            lda  #<(CHRMAPBASE+16*RNUMCOL80)  ; Set copy start locations
            sta  SFROM                        ; |
            lda  #>(CHRMAPBASE+16*RNUMCOL80)  ; |
            sta  SFROM+1                      ; |
            lda  #<CHRMAPBASE                 ; |
            sta  STO                          ; |
            lda  #>CHRMAPBASE                 ; |
            sta  STO+1                        ; /

            ldy  #0
            ldx  #>(16*RNUMCOL80*(RNUMROW80-1))  ; msb size of move
            beq  partPage
pageLoop    lda  (SFROM),y                   ; Copy a page
            sta  (STO),y                     ; |
            iny                              ; |
            bne  pageLoop                    ; /
            inc  SFROM+1                     ; Next page
            inc  STO+1                       ; /
            dex
            bne  pageLoop
partPage    ldx  #<(16*RNUMCOL80*(RNUMROW80-1))
            beq  wipe
partLoop    lda  (SFROM),y                   ; Copy remainder
            sta  (STO),y                     ; |
            iny                              ; |
            dex                              ; |
            bne  partLoop                    ; /

            ; Wipe last two lines
wipe        lda  #<(CHRMAPBASE+(16*RNUMCOL80*(RNUMROW80-1)))
            sta  STO
            lda  #>(CHRMAPBASE+(16*RNUMCOL80*(RNUMROW80-1)))
            sta  STO+1
            ldx  #2           ; Wipe a page and a bit
            ldy  #$FF         ; Wipe a page of memory containing two lines
            lda  #00          ; Use a space to wipe the lines
wipeLoop    sta  (STO),y
            dey
            cpy  #$FF
            bne  wipeLoop

            ; Setup the remainder of the page to be deleted
            inc  STO+1
            ldy  #(16*RNUMCOL80-256)
            dex
            bne  wipeLoop

            lda  #(SNUMROW-2)      ; Set the cursor to one line up from bottom
            sta  cry

            rts
.)


            ;-----------------------------------------
            ; putchxy80
            ; Print a character to screen at position
            ; specified on 80 column screen
            ; This will print ASCII 32-95
            ;-----------------------------------------
            ; ACC - character to print (ASCII)
            ;   X - Column on simulated screen
            ;   Y - Row on simulated screen
            ;-----------------------------------------
putchxy80   .(
            cmp  #95
            bcc  storeCh      ; If <= 95
            and  #$5F         ; Drop bit 5 (upcase)
storeCh     pha               ; Push character to stack
            lda  #$00         ; Zero CHRADDR
            sta  CHRADDR      ; |
            lda  #$00         ; |
            sta  CHRADDR+1    ; /

            ; Find which quarter of a character definition
            ; NOTE This counts the quarters from right to left
            ; TODO tidy this up
            txa
            and  #3           ; Look at right 2 bits
            sta  CHQUARTER
            lda  #3
            sec
            sbc  CHQUARTER
            sta  CHQUARTER

            ; Find which half of a character definition
            ; and store the offset
            tya
            clc
            and  #1
            asl               ; Multiply by 8
            asl               ; |
            asl               ; /
            sta  CHHALFOFF

            ; TODO Put this where zero CHRADDR is above
            ; Find location of simulated column pair
findCol     txa
            lsr               ; Quarter the column
            lsr               ; |
            sta  CHRADDR      ; /   lsb

            ; Find location of row
            tya               ; Half the row
            lsr               ; |
            tay               ; /
findRow     cpy  #00
            beq  mul16
            ; Add number of real columns to address
            clc
            lda  CHRADDR      ; lsb
            adc  #RNUMCOL80
            sta  CHRADDR      ; lsb
            dey
            jmp  findRow


mul16        ; TODO find better name

            ; Multiply by 16 to find location of character
            ; Shift left 4 times to multiply by 16
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb

            ; Add $1000 as address of character map
            clc
            lda  CHRADDR+1    ; msb
            adc  #>CHRMAPBASE
            sta  CHRADDR+1    ; msb

            ; Add CHHALFOFF offset to character map address
            ; This locates in the top or bottom half of the character
            ; definition
            clc
            lda  CHRADDR
            adc  CHHALFOFF
            sta  CHRADDR

            ; Copy the character to the screen
copyCh      lda  #00
            sta  CHDEFADDR+1
            pla               ; Pull character off stack
            sec
            sbc  #SPACE       ; Font definitions are from space onwards
            sta  CHDEFADDR    ; Multiply character by 2
            asl  CHDEFADDR    ; |
            rol  CHDEFADDR+1  ; /

            clc
            lda  CHDEFADDR
            adc  #<fontDef     ; lsb
            sta  CHDEFADDR
            lda  CHDEFADDR+1
            adc  #>fontDef     ; msb
            sta  CHDEFADDR+1


            lda  #1           ; Init bitmasks in self-modifying code
            sta  andL+1       ; |
            sta  andR+1       ; |
            sta  realignL-1   ; /
            sta  realignR-1   ; /

            ; Put character definition into 8 bytes using bits 1 and 2
            ldx  #0
getLoop     ldy  #0
            lda  (CHDEFADDR),y
andL        and  #1
            ldy  #1           ; Align the left bit
realignL    dey               ; |
            beq  alignDoneL   ; |
            lsr               ; |
            jmp  realignL     ; /
alignDoneL
            asl
            sta  CHDEF, x
            ldy  #01
            lda  (CHDEFADDR), y
andR        and  #1
            ldy  #1           ; Align the right bit
realignR    dey               ; |
            beq  alignDoneR   ; |
            lsr               ; |
            jmp  realignR     ; /
alignDoneR
            ora  CHDEF, x

            ; Put character in correct quarter
            ldy  CHQUARTER
realignQ    beq  alignDoneQ
            asl
            asl
            dey
            jmp  realignQ
alignDoneQ

            sta  CHDEF, x
            asl  andL+1       ; Self-modify code to move to next bits
            asl  andR+1       ; |
            inc  realignL-1   ; /
            inc  realignR-1   ; /
            inx
            cpx  #8
            bne  getLoop


            ; Copy the character to the character definition.
            ; This gets the existing definition, clears the bits
            ; where this character will go and ORs the remaining
            ; bits with the new character.
            ldy  #7
            lda  CHQUARTER
            cmp  #00
            beq  q0
            cmp  #01
            beq  q1
            cmp  #02
            beq  q2

q3          lda  (CHRADDR),y
            and  #$3F
            ora  CHDEF, y
            sta  (CHRADDR),y
            dey
            bpl  q3
            jmp  done

q2          lda  (CHRADDR),y
            and  #$CF
            ora  CHDEF, y
            sta  (CHRADDR),y
            dey
            bpl  q2
            jmp  done

q1          lda  (CHRADDR),y
            and  #$F3
            ora  CHDEF, y
            sta  (CHRADDR),y
            dey
            bpl  q1
            jmp  done

q0          lda  (CHRADDR),y
            and  #$FC
            ora  CHDEF, y
            sta  (CHRADDR),y
            dey
            bpl  q0

done        rts
.)



;====================================
; Data
;====================================
mode8020    .byt MODE20       ; Whether in 80 or 20 colummn mode
crx         .byt 0            ; Cursor x position on simulated screen
cry         .byt 0            ; Cursor y position on simulated screen

tmpAcc      .byt 0            ; Temporary location to store ACC if stack
                              ; not convenient
inRedraw    .byt 0            ; In middle of redraw operation

#include "fontdef.a65"        ; The font definitions
