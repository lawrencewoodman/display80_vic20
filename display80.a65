;======================================================================
; Print text using a 2x8 font on an 80 column screen
;----------------------------------------------------------------------
; Included by display.a65, see that file for more details
;----------------------------------------------------------------------
; Copyright (C) 2021-2022 Lawrence Woodman <lwoodman@vlifesystems.com>
; Licensed under an MIT licence.  Please see LICENCE.md for details.
;======================================================================


; Calculated dimensions for 80 column screen
RNUMCOL80   = SNUMCOL/4       ; Real number of text columns
RNUMROW80   = SNUMROW/2       ; Real number of text rows
SLSTCOL80   = SNUMCOL-1       ; Last simulated column


            ;--------------------------------
            ; start80
            ; Start 80 character screen
            ;--------------------------------
start80     lda  #MODE80      ; Set which mode we are in
            sta  mode8020     ; /
            jsr  cfgScr80     ; Configure screen
            jsr  initClr80    ; Init the colour map
            jsr  initScr80    ; Init the screen
            jmp  clrScr80     ; Clear the screen by clearing character map


            ;-----------------------------------------------
            ; cfgScr80
            ; Configure screen dimensions, position and
            ; memory locations
            ;-----------------------------------------------
cfgScr80    lda  #RVTVORIGIN
            sta  VICCR1       ; Set vertical TV origin
            lda  #(128|RNUMCOL80)
            sta  VICCR2       ; Set number of columns displayed
                              ; and screen address
            lda  #((RNUMROW80*2)+1)
            sta  VICCR3       ; Set number of rows displayed
                              ; and character size
            lda  #(240|12)    ; Set screen and character map addresses
                              ; to $1E00 and $1000
            sta  VICCR5
            rts


            ;-----------------------------------------------
            ; initClr80
            ; Init the colour map to alternate black/blue
            ; colours to help make characters more distinct
            ;-----------------------------------------------
initClr80   .(
            ldy  #00
            lda  #CLBLACK
loop        sta  COLMAPBASE, y
            cmp  #CLBLACK
            beq  toBlue
            lda  #CLBLACK
            jmp  next
toBlue      lda  #CLBLUE
next        iny
            bne  loop
            rts
.)


            ;-----------------------------------------------
            ; initScr80
            ; Fill screen map with characters needed
            ;-----------------------------------------------
initScr80   .(
            ldy  #(RNUMCOL80*RNUMROW80)
loop        tya
            sta  SCRBASE, y     ; Store character in screen map
            dey
            cpy  #$FF
            bne  loop
            rts
.)


            ;-----------------------------------------------
            ; clrScr80
            ; Clear the screen by zeroing the character map
            ;-----------------------------------------------
clrScr80    .(
            lda  #$00
            sta  CHRADDR
            lda  #>CHRMAPBASE
            sta  CHRADDR+1
            ldy  #00
loop        lda  #00
            sta  (CHRADDR),y      ; Set character map location
            inc  CHRADDR          ; Increment CHRADDR
            bne  doneInc          ; |
            inc  CHRADDR+1        ; /
doneInc     lda  CHRADDR+1
            cmp  #>SCRBASE
            bne  loop
            rts
.)


            ;------------------------------------------
            ; scrollup80
            ; Scroll 80 column screen up up two lines
            ;------------------------------------------
scrollup80  .(
            lda  #<(CHRMAPBASE+16*RNUMCOL80)  ; Set copy start locations
            sta  SFROM                        ; |
            lda  #>(CHRMAPBASE+16*RNUMCOL80)  ; |
            sta  SFROM+1                      ; |
            lda  #<CHRMAPBASE                 ; |
            sta  STO                          ; |
            lda  #>CHRMAPBASE                 ; |
            sta  STO+1                        ; /

            ldy  #0
            ldx  #>(16*RNUMCOL80*(RNUMROW80-1))  ; msb size of move
            beq  partPage
pageLoop    lda  (SFROM),y                   ; Copy a page
            sta  (STO),y                     ; |
            iny                              ; |
            bne  pageLoop                    ; /
            inc  SFROM+1                     ; Next page
            inc  STO+1                       ; /
            dex
            bne  pageLoop
partPage    ldx  #<(16*RNUMCOL80*(RNUMROW80-1))
            beq  wipe
partLoop    lda  (SFROM),y                   ; Copy remainder
            sta  (STO),y                     ; |
            iny                              ; |
            dex                              ; |
            bne  partLoop                    ; /

            ; Wipe last two lines
wipe        lda  #<(CHRMAPBASE+(16*RNUMCOL80*(RNUMROW80-1)))
            sta  STO
            lda  #>(CHRMAPBASE+(16*RNUMCOL80*(RNUMROW80-1)))
            sta  STO+1
            ldx  #2           ; Wipe a page and a bit
            ldy  #$FF         ; Wipe a page of memory containing two lines
            lda  #00          ; Use a space to wipe the lines
wipeLoop    sta  (STO),y
            dey
            cpy  #$FF
            bne  wipeLoop

            ; Setup the remainder of the page to be deleted
            inc  STO+1
            ldy  #(16*RNUMCOL80-256)
            dex
            bne  wipeLoop

            lda  #(SNUMROW-2)      ; Set the cursor to one line up from bottom
            sta  cry

            rts
.)


            ;-----------------------------------------
            ; putchxy80
            ; Print a character to screen at position
            ; specified on 80 column screen
            ; This will print ASCII 32-126
            ;-----------------------------------------
            ; ACC - character to print (ASCII)
            ;   X - Column on simulated screen
            ;   Y - Row on simulated screen
            ;-----------------------------------------
putchxy80   .(
            cmp  #97
            bcc  storeCh      ; If <= 96
            cmp  #127
            bcs  ge127
            cmp  #123
            bcs  ge123lt127
            and  #$5F         ; Drop bit 5 (upcase)
            jmp  storeCh

ge123lt127  sec
            sbc  #26
            jmp  storeCh
ge127       lda  #32          ; Space
storeCh     sta  D80_ch       ; Store the character
            lda  #$00         ; Zero CHRADDR
            sta  CHRADDR      ; |
            lda  #$00         ; |
            sta  CHRADDR+1    ; /

            ; Find which quarter of a character definition
            txa
            and  #3           ; Look at right 2 bits
            sta  chquarter


            ; Find which vertical half of a character definition
            ; and store the offset
            tya
            lsr
            bcs  vhalf2
            lda  #00
            beq  storeOff
vhalf2      lda  #08
storeOff    sta  chhalfoff

            ; TODO Put this where zero CHRADDR is above
            ; Find location of simulated column pair
findCol     txa
            lsr               ; Quarter the column
            lsr               ; |
            sta  CHRADDR      ; /   lsb

            ; Find location of row
            tya               ; Half the row
            lsr               ; |
            tay               ; /
findRow     cpy  #00
            beq  mul16
            ; Add number of real columns to address
findRowLoop clc
            lda  CHRADDR      ; lsb
            adc  #RNUMCOL80
            sta  CHRADDR      ; lsb
            dey
            bne  findRowLoop


mul16       ; Multiply by 16 to find location of character
            ; Shift left 4 times to multiply by 16
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb

            ; Add $1000 as address of character map
            clc
            lda  CHRADDR+1    ; msb
            adc  #>CHRMAPBASE
            sta  CHRADDR+1    ; msb

            ; Add chhalfoff offset to character map address
            ; This locates in the top or bottom half of the character
            ; definition
            clc
            lda  CHRADDR
            adc  chhalfoff
            sta  CHRADDR

            ; Copy the character to the screen
            lda  #00
            sta  CHDEFADDR+1
            lda  D80_ch       ; Load the character
            sec
            sbc  #SPACE       ; Font definitions are from space onwards
            lsr               ; Divide by 4
            lsr               ; /
            sta  CHDEFADDR
            asl  CHDEFADDR    ; Multiply character by 8
            rol  CHDEFADDR+1  ; |
            asl  CHDEFADDR    ; |
            rol  CHDEFADDR+1  ; |
            asl  CHDEFADDR    ; |
            rol  CHDEFADDR+1  ; /

            clc
            lda  CHDEFADDR
            adc  #<fontDef     ; lsb
            sta  CHDEFADDR
            lda  CHDEFADDR+1
            adc  #>fontDef     ; msb
            sta  CHDEFADDR+1

            ; Find character def quarter
            lda  D80_ch
            and  #3
            sta  D80_chdefq   ; Save quarter for character def

            ; Put character definition into 8 bytes
            ldy  #7
            lda  D80_chdefq
            beq  qd0
            cmp  #01
            beq  qd1
            cmp  #02
            beq  qd2

; TODO Store a value to use in AND below rather than 4 q jumps

qd3         lda  (CHDEFADDR),y
            and  #$3
            sta  CHDEF, y
            dey
            bpl  qd3
            bmi  setMask

qd2         lda  (CHDEFADDR),y
            and  #$C
            sta  CHDEF, y
            dey
            bpl  qd2
            bmi  setMask

qd1         lda  (CHDEFADDR),y
            and  #$30
            sta  CHDEF, y
            dey
            bpl  qd1
            bmi  setMask

qd0         lda  (CHDEFADDR),y
            and  #$C0
            sta  CHDEF, y
            dey
            bpl  qd0

            ; TODO  sort out comment
            ; Copy the character to the character definition.
            ; This gets the existing definition, clears the bits
            ; where this character will go and ORs the remaining
            ; bits with the new character.
setMask     ldy  #7
            lda  chquarter
            beq  q0
            cmp  #01
            beq  q1
            cmp  #02
            beq  q2

q3          lda  #$FC
            sta  D80_chmask
            bne  calcQDiff
q2          lda  #$F3
            sta  D80_chmask
            bne  calcQDiff
q1          lda  #$CF
            sta  D80_chmask
            bne  calcQDiff
q0          lda  #$3F
            sta  D80_chmask


            ; Calculate the difference between the quarter of the char
            ; definition and where it is needed
calcQDiff   sec
            lda  chquarter
            sbc  D80_chdefq
            sta  D80_chqdiff
            beq  copyCh       ; No shifting needed so just copy the character
            bpl  shiftRight


            ; Align character in CHDEF to correct quarter for character
            ; to print by shifting left

            ; TODO sort out name of label and comments
            ; Copy the character to the character definition.
            ; This gets the existing definition, clears the bits
            ; where this character will go and ORs the remaining
            ; bits with the new character.
shiftLeft   ldy  #7           ; Number of rows of the char definition less one
slLoopA     ldx  D80_chqdiff
            lda  CHDEF, y
slLoopB     asl
            asl
            inx               ; Difference is negative so increment until 0
            bne  slLoopB      ; /
            sta  CHDEF, y
            ; TODO AND here with another mask and remove need to do above
            lda  (CHRADDR),y
            and  D80_chmask
            ora  CHDEF,y
            sta  (CHRADDR),y
            dey
            bpl  slLoopA
            bmi  done

            ; Align character in CHDEF to correct quarter for character
            ; to print by shifting right
shiftRight  ldy  #7           ; Number of rows of the char definition less one
srLoopA     ldx  D80_chqdiff
            lda  CHDEF, y
srLoopB     lsr
            lsr
            dex
            bne  srLoopB
            sta  CHDEF, y
            ; TODO AND here with another mask and remove need to do above
            lda  (CHRADDR),y
            and  D80_chmask
            ora  CHDEF,y
            sta  (CHRADDR),y
            dey
            bpl  srLoopA
            bmi  done

            ; Straight copy without shifting
copyCh      ldy  #7
copyChLoop  lda  (CHRADDR),y
            and  D80_chmask
            ora  CHDEF, y
            sta  (CHRADDR),y
            dey
            bpl  copyChLoop

done        rts
.)

;====================================
; Data
;====================================
chquarter   .byt 0            ; Quarter of character definition
chhalfoff   .byt 0            ; Half of character definition offset (half*8)
D80_ch      .byt 0            ; A character
D80_chdefq  .byt 0            ; The quarter that the char definition is in
D80_chqdiff .byt 0            ; The difference between the quarter of the char
                              ; definition and where it is needed
D80_chmask  .byt 0            ; Bitmask used to wipe bits before copy char
                              ; to screen/character map
